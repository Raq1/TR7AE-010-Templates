//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef byte TYPE <read=TYPEread, write=TYPEwrite>;
    string TYPEread(TYPE type) {
        switch (type) {
            case 0: 
                return "General";
            case 1: 
                return "Empty";
            case 2: 
                return "Animation";
            case 3: 
                return "Pushbuffer_WC";
            case 4: 
                return "Pushbuffer";
            case 5: 
                return "Texture";
            case 6: 
                return "Sound";
            case 7: 
                return "DTPData";
            case 8: 
                return "Script";
            case 9: 
                return "ShaderLib";
            case 10: 
                return "CollisionMesh";
            case 11:
                return "Num_Section_Types";
            default: 
                return "Unknown";  
        }
    }
    void TYPEwrite (TYPE &t, string str) {
        t = Atoi(str);
    }

typedef enum <ubyte> {
  kTypeRigid = 0,
  kTypeSkinned = 1,
  kTypeVmoAll = 2,
  kTypeVmoXYZ = 3,
  kTypeVmoRGBA = 4,
  kTypeVmoUV = 5,
  kTypeBend = 6,
  kTypeDummy = 0x1E240,
  kTypeForceDWORD = 0x7FFFFFFF,
} RenderModelDataFlag;

typedef enum <ushort> {
  Double_Sided = 0,
  Single_Sided = 32,
  See_Through_UNCERTAIN = 2086,
  See_Through_UNCERTAIN2 = 42,
  See_Through_UNCERTAIN3 = 38,
  Transparent_Single_Sided = 2087,
  Invisible = 65535,
} Material_Property;

typedef enum <ubyte> {
  Off = 0,
  On = 32,
  Dark_Thing = 60,
} Alpha;

local uint64 i<hidden=true>;
local uint64 v<hidden=true>;
local uint SectionDataSize;
local uint segmentList;
local uint weight2;
local uint null;

null = 235995135;

struct {
    uint32 magic; // 0x0
    int32 size; // 0x4
	        TYPE m_type;
    byte _bf5; // 0x9
    uint16 versionID; // 0xa
    //uint32 packedData;
    struct {
        uint32 hasDebugInfo : 1;
        uint32 resourceType : 7;
        uint32 numRelocations : 24;        
    } packedData;
    uint32 id;
    uint32 specMask;

struct {
    struct {
        uint16 type : 3;
        uint16 sectionIndexOrType : 13;
    } typeAndSectionInfo;
    int16 typeSpecific;
    uint32 offset <fgcolor=cRed>;
} Relocations[packedData.numRelocations];

} SectionData <fgcolor=cGreen>;

local uint32 numRelocations = SectionData.packedData.numRelocations;
Printf("%d\n", numRelocations);
	SectionDataSize = (numRelocations * 0x8) + 0x18;

struct {

  uint OEDTemplateSelector;
  int m_pAnimBlends;
  int m_pAnimPatterns;
  int TuneDataPtr;
  uint m_numAnimBlends;
  uint m_numAnimPatterns;

  struct {

  int vvIntroDist;
  int vvRemoveDist;
  int introDist;
  int removeDist;
  float maxCheckeeDistance;
  float lod1Dist;
  float lod2Dist;
  uchar lod1model;
  uchar lod2model;
  uchar shadowmodel;
  uchar lightingOverride;
  uint16 RAD_Icon_Movable : 1;
  uint16 RAD_Icon_Pickup : 1;
  uint16 RAD_Icon_Info : 1;
  uint16 RAD_Icon_Technical : 1;
  uint16 RAD_Icon_PhysUnstable : 1;
  uint16 RAD_Icon_Grapple : 1;
  uint16 RAD_Icon_ChemUnstable : 1;
  uint16 RAD_Color_Override : 1;
  uint16 RAD_Bool_Pad : 8;
  uchar uRADPulsePeriodIndex;
  uchar Pad1;
  float fRADRange;
  unsigned int uRADUnscannedColor;
  float fRADUnscannedFadeValue;
  unsigned int uRADScannedColor;
  float fRADScannedFadeValue;
  float fGrappleReticleRadius;

} ObjectHeader;

    FSeek(m_pAnimBlends + SectionDataSize);

  struct {

  int16 animFragment[9];
  uint16 playSpeed;
  uchar playMode;
  uchar blendType;
  uchar rootInterpMode;
  uchar interpFrames;
  uchar startFrame;
  uchar interpOut;
  uchar alphaTable;
  uchar alphaTableOut;
  uchar clothSection;
  char boneSet;
  uchar flags;
  uchar pad[1];

    } pAnimBlends[m_numAnimBlends];

    FSeek(m_pAnimPatterns + SectionDataSize);

  struct {

  int idk;

    } pAnimPatterns[m_numAnimPatterns];

    FSeek(TuneDataPtr + SectionDataSize);

  struct {

  float approachAngle;
  float attachRadius;
  float attachZLimit;
  float influenceRadius;
  int16 attachDelayMaximum;
  int16 attachDelayMinimum;
  int16 attachDelayRampTime;
  uint16 flags;

    } TuneData;

} ObjectDTPData;
