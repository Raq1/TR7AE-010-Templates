//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef byte TYPE <read=TYPEread, write=TYPEwrite>;
    string TYPEread(TYPE type) {
        switch (type) {
            case 0: 
                return "General";
            case 1: 
                return "Empty";
            case 2: 
                return "Animation";
            case 3: 
                return "Pushbuffer_WC";
            case 4: 
                return "Pushbuffer";
            case 5: 
                return "Texture";
            case 6: 
                return "Sound";
            case 7: 
                return "DTPData";
            case 8: 
                return "Script";
            case 9: 
                return "ShaderLib";
            case 10: 
                return "CollisionMesh";
            case 11:
                return "Num_Section_Types";
            default: 
                return "Unknown";  
        }
    }
    void TYPEwrite (TYPE &t, string str) {
        t = Atoi(str);
    }

local uint header2;
local uint SectionDataSize;

struct {
    uint32 magic; // 0x0
    int32 size; // 0x4
	        TYPE m_type;
    byte _bf5; // 0x9
    uint16 versionID; // 0xa
    //uint32 packedData;
    struct {
        uint32 hasDebugInfo : 1;
        uint32 resourceType : 7;
        uint32 numRelocations : 24;        
    } packedData;
    uint32 id;
    uint32 specMask;

struct {
    struct {
        uint16 type : 3;
        uint16 sectionIndexOrType : 13;
    } typeAndSectionInfo;
    int16 typeSpecific;
    uint32 offset <fgcolor=cRed>;
} Relocations[packedData.numRelocations];

} SectionData <fgcolor=cGreen>;

local uint32 numRelocations = SectionData.packedData.numRelocations;
Printf("%d\n", numRelocations);

	header2 = (numRelocations * 0x8) + 0x18;
	SectionDataSize = (numRelocations * 0x8) + 0x18;


FSeek(header2);


struct {
  int oflags;
  int oflags2;
  int uniqueID;
  uint guiID;
  int functionTableID;
  int32 obsoleteSoundBank;
  int16 numModels;
  int16 numAnims;
  int32 numAnimPatterns;
  uint32 modelList;
  uint32 animList;
  uint32 animFXList;
  uint32 animPatternList;
  int introDist;
  int vvIntroDist;
  int removeDist;
  int vvRemoveDist;
  uint32 baseData;
  uint32 data;
  uint32 name;
  uint32 soundData;
  int16 sectionA;
  int16 sectionB;
  int16 sectionC;
  int16 numberOfEffects;
  uint32 effectList;
  uint32 effectData;
  uint32 objectDTPData;
  uint32 VramLink;
  int32 textureLoadList;
  uint32 childObjectList;
  int lod1Dist;
  int lod2Dist;
  char lod1Model;
  char lod2Model;
  char shadowModel;
  char lightingOverride;
  float maxCheckeeDistance;
  int rdSetupList;
} Object;

 FSeek(Object.modelList + SectionDataSize);

struct {

    int model;

} modelList[Object.numModels];

 FSeek(Object.animList + SectionDataSize);

struct {

    int anim;

} animList[Object.numAnims];

 FSeek(Object.animPatternList + SectionDataSize);

struct {

    int animPattern;

} animPatternList[Object.numAnimPatterns];