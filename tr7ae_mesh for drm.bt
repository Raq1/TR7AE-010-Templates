//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: tr7ae_mesh.bt
//   Authors: Raq, also special thanks to TheIndra & alphaZomega
//   Version: 1.0
//   Purpose: Parsing Tomb Raider Legend/Anniversary mesh format
//  Category: Modding
// File Mask: .gnc
//  ID Bytes: 
//   History: This mesh format is used for the old gen meshes for TR Legend and meshes for TR Anniversary
//------------------------------------------------
FSeek(0x133EF8);

    struct {

int version;
int numSegments;
int numVirtSegments;
int segmentList;

struct {

float X;
float Y;
float Z;
float W;

} modelScale;

int numVertices;
int vertexList;
int numNormals;
int normalList;
int numFaces;
int faceList;
int OBSOLETEaniTextures;
float maxRad;
float maxRadSq;
int OBSOLETEstartTextures;
int OBSOLETEendTextures;
int AnimatedListInfo;
int AnimatedInfo;
int ScrollInfo;
int TextureStripInfo;
int envMappedVertices;
int eyeRefEnvMappedVertices;
int MaterialVertexColor;
int SpectralVertexColors;
int pnShadowFaces;
int pnShadowEdges;
int boneMirrorDataOffset;
int drawgroupCenterOffset;
int numMarkUps;
int markUpOffset;
int numTargets;
int TargetOffset;
uint cdcRenderDataID;

 FSeek(boneMirrorDataOffset);

struct {

  uint16 bone1 : 8;
  uint16 bone2 : 8;
  uint16 count : 8;

} BoneMirrorData;

 FSeek(drawgroupCenterOffset);

struct {

int unknown;
int unknown2;

} drawGroupCenter;

} MeshHeader <fgcolor=cYellow>;

FSeek(MeshHeader.segmentList);
for (i=0; i<MeshHeader.numSegments; i++);

if (MeshHeader.numSegments > 0) {
    struct {

		float minXPos;
		float minZPos;
		float minYPos;
        uint minWPos;

		float maxXPos;
		float maxZPos;
		float maxYPos;
        uint maxWPos;

		float pivotXPos;
		float pivotZPos;
		float pivotYPos;
        uint pivotWPos;

        uint flags;
        int16 FirstVertex <bgcolor=cLtGray>;
        int16 Lastvertex <bgcolor=cLtGray>;
		
        uint boneParent <fgcolor=0xff8080>;
		uint HInfo;


    } Segments[MeshHeader.numSegments] <fgcolor=0xffff00>;	
}

    struct {

		float minXPos;
		float minZPos;
		float minYPos;
        uint minWPos;

		float maxXPos;
		float maxZPos;
		float maxYPos;
        uint maxWPos;

		float pivotXPos;
		float pivotZPos;
		float pivotYPos;
        uint pivotWPos;

        int flags;
        int16 FirstVertex;
        int16 LastVertex;
        int16 index;
        int16 weightIndex;
        float weight;


    } VirtSegments[MeshHeader.numVirtSegments] <fgcolor=0x808000>;

for (i=0; i<MeshHeader.numSegments; i++) {
    if (Segments[i].HInfo > 0) {
        FSeek(Segments[i].HInfo);

struct {

  int numHSpheres;
  uint32 hsphereList;
  int numHBoxes;
  uint32 hboxList;
  int numHMarkers;
  uint32 hmarkerList;
  int numHCapsules;
  uint32 hcapsuleList;


if (numHSpheres > 0) {

struct {

    FSeek(hsphereList);

  int16 flags;
  char id;
  char rank;
  uint16 radius;
  int16 x;
  int16 y;
  int16 z;
  uint radiusSquared;
  uint16 mass;
  char buoyancyFactor;
  char explosionFactor;
  char iHitMaterialType;
  char pad;
  int16 damage;

    } HSphere[numHSpheres];
}

if (numHBoxes > 0) {

struct {

    FSeek(hboxList);

    float widthx;
    float widthy;
    float widthz;
    float widthw;
    float posx;
    float posy;
    float posz;
    float posw;
    float quat;
  int16 flags;
  char id;
  char rank;
  uint16 mass;
  char buoyancyFactor;
  char explosionFactor;
  char iHitMaterialType;
  char pad;
  int16 damage;

    } Hbox[numHBoxes];
}

if (numHMarkers > 0) {

struct {

    FSeek(hmarkerList);

  int bone;
  int index;
  float px;
  float py;
  float pz;
  float rx;
  float ry;
  float rz;
    } HMarker[numHMarkers];
}

if (numHCapsules > 0) {

struct {

    FSeek(hcapsuleList);

  int16 x;
  int16 y;
  int16 z;
  float quat;
  int16 flags;
  char id;
  char rank;
  uint16 radius;
  uint16 length;
  uint16 mass;
  char buoyancyFactor;
  char explosionFactor;
  char iHitMaterialType;
  char pad;
  int16 damage;

    } HCapsule[numHCapsules];
}


        } HInfo <fgcolor=cYellow>;
    }
}

 FSeek(MeshHeader.vertexList);

struct {

    int16 X;
    int16 Y;
    int16 Z;
    byte nx;
    byte ny;
    byte nz;
    byte pad;
    int16 bone_ID;
    int UV <bgcolor=cLtGray>;
} Vertices[MeshHeader.numVertices]<fgcolor=cGreen>;

FSeek(MeshHeader.faceList);

if (MeshHeader.faceList > 0) {

struct {

struct {

  uint16 v0;
  uint16 v1;
  uint16 v2;

} Face;

  uint16 sameVertBits;
} MFace[MeshHeader.numFaces];
}

FSeek(MeshHeader.TextureStripInfo);

struct {
while (true) {
struct {

    int16 vertexCount <fgcolor=cBlue>;
    int16 drawGroup <fgcolor=cBlue>;
    ubyte tpageid <fgcolor=cBlue>;
    float sortPush <fgcolor=cBlue>;
    float scrollOffset <fgcolor=cBlue>;
    uint nextTexture <fgcolor=cBlue>;

    ushort Faces[vertexCount];
if ( ReadShort( FTell() ) == -1 ) 
    FSkip(2);

FSeek(nextTexture);
} Mesh <fgcolor=cRed>;
if ( ReadShort( FTell() ) == 0 ) 
    break;
}
} TextureStripInfo;